/*
 * Copyright (c) 2016, NXP Semiconductor, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * o Redistributions of source code must retain the above copyright notice, this list
 *   of conditions and the following disclaimer.
 *
 * o Redistributions in binary form must reproduce the above copyright notice, this
 *   list of conditions and the following disclaimer in the documentation and/or
 *   other materials provided with the distribution.
 *
 * o Neither the name of NXP Semiconductor, Inc. nor the names of its
 *   contributors may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 
/**
 * @file    NVIC_Priority.c
 * @brief   Application entry point.
 */
#include <stdio.h>
#include "DataTypeDefinitions.h"
#include "NVIC.h"
#include "GPIO.h"
#include "MK64F12.h"



int main(void) {


	uint8 statePortC = 0;
	uint8 statePortA = 0;

	/**Activating the GPIOA, GPIOB and GPIOC clock gating*/
	GPIO_clockGating(GPIO_A);
	GPIO_clockGating(GPIO_B);
	GPIO_clockGating(GPIO_C);


	/**Pin control configuration of GPIOB pin21 and pin21 as GPIO by using a special macro contained in Kinetis studio in the MK64F12. h file*/
	PORTB->PCR[21] = PORT_PCR_MUX(1);
	PORTB->PCR[22] = PORT_PCR_MUX(1);
	/**Pin control configuration of GPIOA pin4 as a GPIO with pull-up resistor and interrupt in falling edge*/
	PORTA->PCR[4] = GPIO_MUX1|GPIO_PE|GPIO_PS|INTR_FALLING_EDGE;
	/**Pin control configuration of GPIOC pin6 as a GPIO with pull-up resistor and interrupt in falling edge*/
	PORTC->PCR[6] = GPIO_MUX1|GPIO_PE|GPIO_PS|INTR_FALLING_EDGE;


	/**Assigns a safe value to the output pin21 of the GPIOB*/
	GPIOB->PDOR |= 0x00200000;/**Blue led off*/
	GPIOB->PDOR |= 0x00400000;/**Read led off*/

	/**Configures GPIOB pin21 as output*/
	GPIOB->PDDR = 0x00200000;
	/**Configures GPIOB pin22 as output*/
	GPIOB->PDDR |= 0x00400000;
	/**Configures GPIOC pin6 as input*/
	GPIOC->PDDR &=~(0x40);
	/**Sets the threshold for interrupts, if the interrupt has higher priority constant that the BASEPRI, the interrupt will not be attended*/
	NVIC_setBASEPRI_threshold(PRIORITY_5);
	/**Enables and sets a particular interrupt and its priority*/
	NVIC_enableInterruptAndPriotity(PORTC_IRQ,PRIORITY_10);
	/**Enables and sets a particular interrupt and its priority*/
	NVIC_enableInterruptAndPriotity(PORTA_IRQ,PRIORITY_4);

	EnableInterrupts;


    while(1) {
    	if(TRUE == GPIO_getIRQStatus(GPIO_C)){
			if(statePortC)
			{
				GPIOB->PDOR |= 0x00200000;/**Blue led off*/
			}
			else
			{
				GPIOB->PDOR &= ~(0x00200000);/**Blue led on*/
			}
			statePortC = !statePortC;
			GPIO_clearIRQStatus(GPIO_C);
		}


		if(TRUE == GPIO_getIRQStatus(GPIO_A)){
			if(statePortA)
			{
				GPIOB->PDOR |= 0x00400000;/**Read led off*/
			}
			else
			{
				GPIOB->PDOR &= ~(0x00400000);/**Read led on*/
			}
			statePortA = !statePortA;
			GPIO_clearIRQStatus(GPIO_A);
		}


    }
    return 0 ;
}
